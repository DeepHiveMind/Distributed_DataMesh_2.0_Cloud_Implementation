{"pageProps":{"projectName":"OYMÂ Data Plattform","currentAdr":{"slug":"20211109-use-avro-for-message-serialization","package":null,"title":"Use Avro for message serialization","status":"accepted","supersededBy":null,"tags":["message-format","message-serialization"],"deciders":["Lukas Meyer","Benny Dinkel","Pascal Moser","Stefan Koch","Marco Amhof","Guido Schmutz"],"body":{"enhancedMdx":"\n## Context and Problem Statement\n\nAs both Azure Event Hub and Azure Blob Storage/Azure Data Lake Storage Gen2 offer schema-on-read model, a serialization format is needed so that data (messages) can be serialized into a binary object, which is used either as a message in Kafka or an object in object storage. The serialization should be as fast and compact as possible.\n\n## Decision Drivers <!-- optional -->\n\n- how comact is the serialization?\n- how fast is the serialization?\n- interoperability of the serialization (can it be used by Java, Python as well as other programming environment)?\n- support for forward and backward compatibility\n- does it have schema support for defining a valid message\n\n## Considered Options\n\n- Option 1: [Apache Avro](http://avro.apache.org)\n- Option 2: [Protocol Buffers](https://developers.google.com/protocol-buffers)\n- Option 3: [JSON](https://www.json.org/json-en.html)\n\n## Decision Outcome\n\nChosen option: **Option 1: Avro**, because\n\n- Avro is the the most compact serialization format out of the 3 options\n- it offers backward- and/or forward-compatibility\n- it has a schema language\n- it is supported by many programming languages such as Java, Python, C, C++ as well as Apache Spark\n- it can generate classes from the Avro schema for easys serialization and deserialization\n- it is very well integrated with both Kafka ecosystem and Big Data ecosystem\n\n## Links <!-- optional -->\n\n- [Apache Avro](http://avro.apache.org) <!-- example: Refined by [xxx](yyyymmdd-xxx.md) -->\n- [Kafka with AVRO vs., Kafka with Protobuf vs., Kafka with JSON Schema](https://simon-aubury.medium.com/kafka-with-avro-vs-kafka-with-protobuf-vs-kafka-with-json-schema-667494cbb2af)\n- [Big Data, Data Lake, Fast Data - Dataserialiation-Formats](https://es.slideshare.net/gschmutz/big-data-data-lake-datenserialisierungsformate)\n"},"creationDate":"2021-11-25T07:20:17.298Z","lastEditDate":"2021-11-25T07:20:17.298Z","lastEditAuthor":"Anonymous","publicationDate":"2021-11-09T23:59:59.000Z","file":{"relativePath":"docs/adr/20211109-use-avro-for-message-serialization.md","absolutePath":"/opt/adr/docs/adr/20211109-use-avro-for-message-serialization.md"}},"l4bVersion":"1.0.0-beta.11"},"__N_SSG":true}